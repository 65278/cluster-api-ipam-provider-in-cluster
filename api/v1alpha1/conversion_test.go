/*
Copyright 2023 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"k8s.io/apimachinery/pkg/runtime"
	v1alpha2 "sigs.k8s.io/cluster-api-ipam-provider-in-cluster/api/v1alpha2"
	utilconversion "sigs.k8s.io/cluster-api/util/conversion"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	. "sigs.k8s.io/controller-runtime/pkg/envtest/komega"
)

// IgnoreAnnotations will skip comparing annotations.
// This is useful as the old version data will be loaded into an annotation
// when upconverting to allow downconverting later.
var IgnoreAnnotations = IgnorePaths{"ObjectMeta.Annotations"}

var _ = Describe("v1alpha1 to v1alpha2 conversions", func() {
	DescribeTable("InClusterIPPoolSpec",
		func(specIn *InClusterIPPoolSpec, expectedSpecOut *v1alpha2.InClusterIPPoolSpec) {
			in := &InClusterIPPool{Spec: *specIn}
			spokeBefore := in.DeepCopyObject().(conversion.Convertible)

			dst := &v1alpha2.InClusterIPPool{}
			dstHub := dst.DeepCopyObject().(conversion.Hub)
			Expect(spokeBefore.ConvertTo(dstHub)).To(Succeed())
			expectedOut := &v1alpha2.InClusterIPPool{Spec: *expectedSpecOut}
			Expect(dstHub).To(EqualObject(expectedOut, IgnoreAnnotations))

			gin := &GlobalInClusterIPPool{Spec: *specIn}
			spokeBefore = gin.DeepCopyObject().(conversion.Convertible)

			gdst := &v1alpha2.GlobalInClusterIPPool{}
			dstHub = gdst.DeepCopyObject().(conversion.Hub)
			Expect(spokeBefore.ConvertTo(dstHub)).To(Succeed())
			gexpectedOut := &v1alpha2.GlobalInClusterIPPool{Spec: *expectedSpecOut}
			Expect(dstHub).To(EqualObject(gexpectedOut, IgnoreAnnotations))
		},
		Entry("converts with First/Last/Subnet/Prefix",
			&InClusterIPPoolSpec{
				Gateway: "1.1.1.1",
				Subnet:  "1.1.1.1/28",
				First:   "1.1.1.1",
				Last:    "1.1.1.10",
				Prefix:  28,
			},
			&v1alpha2.InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    28,
			},
		),
		Entry("converts with only Address",
			&InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    28,
			},
			&v1alpha2.InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    28,
			},
		),
		Entry("defaults Prefix from Subnet",
			&InClusterIPPoolSpec{
				Subnet:  "1.1.1.0/24",
				First:   "1.1.1.10",
				Last:    "1.1.1.15",
				Gateway: "1.1.1.1",
			},
			&v1alpha2.InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.10-1.1.1.15"},
				Prefix:    24,
			},
		),
		Entry("defaults First and Last from Subnet",
			&InClusterIPPoolSpec{
				Subnet:  "1.1.1.0/24",
				Gateway: "1.1.1.1",
			},
			&v1alpha2.InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.1-1.1.1.254"},
				Prefix:    24,
			},
		),
	)
})

var _ = Describe("v1alpha2 to v1alpha1 conversions", func() {
	DescribeTable("InClusterIPPool",
		func(specIn *v1alpha2.InClusterIPPoolSpec, expectedSpecOut *InClusterIPPoolSpec) {
			in := &v1alpha2.InClusterIPPool{Spec: *specIn}
			hub := in.DeepCopyObject().(conversion.Hub)

			dst := &InClusterIPPool{}
			spoke := dst.DeepCopyObject().(conversion.Convertible)
			Expect(spoke.ConvertFrom(hub)).To(Succeed())
			expectedOut := &InClusterIPPool{Spec: *expectedSpecOut}
			Expect(spoke).To(EqualObject(expectedOut, IgnoreAnnotations))

			gin := &v1alpha2.GlobalInClusterIPPool{Spec: *specIn}
			hub = gin.DeepCopyObject().(conversion.Hub)

			gdst := &GlobalInClusterIPPool{}
			spoke = gdst.DeepCopyObject().(conversion.Convertible)
			Expect(spoke.ConvertFrom(hub)).To(Succeed())
			gexpectedOut := &GlobalInClusterIPPool{Spec: *expectedSpecOut}
			Expect(spoke).To(EqualObject(gexpectedOut, IgnoreAnnotations))
		},
		Entry("Addresses are unmodified",
			&v1alpha2.InClusterIPPoolSpec{
				Gateway:   "1.2.3.5",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    10,
			},
			&InClusterIPPoolSpec{
				Gateway:   "1.2.3.5",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    10,
			},
		),
	)
})

var _ = Describe("v1alpha1 -> v1alpha2 -> v1alpha1 conversions", func() {
	DescribeTable("InClusterIPPool",
		func(specIn *InClusterIPPoolSpec, expectedSpecOut *InClusterIPPoolSpec) {
			in := &InClusterIPPool{Spec: *specIn}
			expectedOut := &InClusterIPPool{Spec: *expectedSpecOut}

			spokeBefore := in.DeepCopyObject().(conversion.Convertible)

			dst := &v1alpha2.InClusterIPPool{}
			dstHub := dst.DeepCopyObject().(conversion.Hub)
			Expect(spokeBefore.ConvertTo(dstHub)).To(Succeed())

			alpha1 := &InClusterIPPool{}
			spokeAfter := alpha1.DeepCopyObject().(conversion.Convertible)
			Expect(spokeAfter.ConvertFrom(dstHub)).To(Succeed())

			Expect(spokeAfter).To(EqualObject(expectedOut, IgnoreAnnotations))

			gin := &GlobalInClusterIPPool{Spec: *specIn}
			spokeBefore = gin.DeepCopyObject().(conversion.Convertible)

			gdst := &v1alpha2.GlobalInClusterIPPool{}
			dstHub = gdst.DeepCopyObject().(conversion.Hub)
			Expect(spokeBefore.ConvertTo(dstHub)).To(Succeed())

			galpha1 := &GlobalInClusterIPPool{}
			spokeAfter = galpha1.DeepCopyObject().(conversion.Convertible)
			Expect(spokeAfter.ConvertFrom(dstHub)).To(Succeed())

			gexpectedOut := &GlobalInClusterIPPool{Spec: *expectedSpecOut}
			Expect(spokeAfter).To(EqualObject(gexpectedOut, IgnoreAnnotations))
		},
		Entry("Fields are set back as expected when specs have Addresses, Gateway, Prefix",
			&InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    16,
			},
			&InClusterIPPoolSpec{
				Gateway:   "1.1.1.1",
				Addresses: []string{"1.1.1.1-1.1.1.10"},
				Prefix:    16,
			},
		),
		Entry("Fields are set back as expected when specs have First, Last, Subnet",
			&InClusterIPPoolSpec{
				Gateway: "1.1.1.1",
				Subnet:  "1.1.1.1/16",
				First:   "1.1.1.2",
				Last:    "1.1.1.10",
				Prefix:  16,
			},
			&InClusterIPPoolSpec{
				Gateway: "1.1.1.1",
				Subnet:  "1.1.1.1/16",
				First:   "1.1.1.2",
				Last:    "1.1.1.10",
				Prefix:  16,
			},
		),
		Entry("Fields are defaulted when applied as v1alpha1",
			&InClusterIPPoolSpec{
				Gateway: "1.1.1.1",
				Subnet:  "1.1.1.1/24",
			},
			&InClusterIPPoolSpec{
				Gateway: "1.1.1.1",
				Subnet:  "1.1.1.1/24",
				First:   "1.1.1.1",
				Last:    "1.1.1.254",
				Prefix:  24,
			},
		),
	)
})

var _ = Describe("fuzzy conversion", func() {
	Describe("InClusterIPPool", func() {
		It("passes capi fuzzer tests", func() {
			scheme := runtime.NewScheme()
			Expect(AddToScheme(scheme)).To(Succeed())
			Expect(v1alpha2.AddToScheme(scheme)).To(Succeed())

			utilconversion.FuzzTestFunc(utilconversion.FuzzTestFuncInput{
				Scheme: scheme,
				Hub:    &v1alpha2.InClusterIPPool{},
				Spoke:  &InClusterIPPool{},
			})
		})
	})

	Describe("GlobalInClusterIPPool", func() {
		It("passes capi fuzzer tests", func() {
			scheme := runtime.NewScheme()
			Expect(AddToScheme(scheme)).To(Succeed())
			Expect(v1alpha2.AddToScheme(scheme)).To(Succeed())

			utilconversion.FuzzTestFunc(utilconversion.FuzzTestFuncInput{
				Scheme: scheme,
				Hub:    &v1alpha2.GlobalInClusterIPPool{},
				Spoke:  &GlobalInClusterIPPool{},
			})
		})
	})
})
